{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport function PasswordConfirm() {\n  _s();\n\n  const [passwordError, setPasswordErr] = useState(\"\");\n  const [confirmPasswordError, setConfirmPasswordError] = useState(\"\");\n  const [passwordInput, setPasswordInput] = useState({\n    password: \"\",\n    confirmPassword: \"\"\n  });\n\n  const handlePasswordChange = event => {\n    const passwordInputValue = event.target.value.trim();\n    const passwordInputFieldName = event.target.name;\n    const NewPasswordInput = { ...passwordInput,\n      [passwordInputFieldName]: passwordInputValue\n    };\n    setPasswordInput(NewPasswordInput);\n  };\n\n  const handleValidation = event => {\n    const passwordInputValue = event.target.value.trim();\n    const passwordInputFieldName = event.target.name; //for password\n\n    if (passwordInputFieldName === \"password\") {\n      const uppercaseRegExp = /(?=.*?[A-Z])/;\n      const lowercaseRegExp = /(?=.*?[a-z])/;\n      const digitsRegExp = /(?=.*?[0-9])/;\n      const specialCharRegExp = /(?=.*?[#?!@$%^&*-])/;\n      const minLengthRegExp = /.{8,}/;\n      const passwordLength = passwordInputValue.length;\n      const uppercasePassword = uppercaseRegExp.test(passwordInputValue);\n      const lowercasePassword = lowercaseRegExp.test(passwordInputValue);\n      const digitsPassword = digitsRegExp.test(passwordInputValue);\n      const specialCharPassword = specialCharRegExp.test(passwordInputValue);\n      const minLengthPassword = minLengthRegExp.test(passwordInputValue);\n      let errMsg = \"\";\n\n      if (passwordLength === 0) {\n        errMsg = \"Password is empty\";\n      } else if (!uppercasePassword) {\n        errMsg = \"At least one Uppercase\";\n      } else if (!lowercasePassword) {\n        errMsg = \"At least one Lowercase\";\n      } else if (!digitsPassword) {\n        errMsg = \"At least one digit\";\n      } else if (!specialCharPassword) {\n        errMsg = \"At least one Special Characters\";\n      } else if (!minLengthPassword) {\n        errMsg = \"At least minumum 8 characters\";\n      } else {\n        errMsg = \"\";\n      }\n\n      setPasswordErr(errMsg);\n    } // for confirm password\n\n\n    if (passwordInputFieldName === \"confirmPassword\" || passwordInputFieldName === \"password\" && passwordInput.confirmPassword.length > 0) {\n      if (passwordInput.confirmPassword !== passwordInput.password) {\n        setConfirmPasswordError(\"Confirm password is not matched\");\n      } else {\n        setConfirmPasswordError(\"\");\n      }\n    }\n  };\n}\n\n_s(PasswordConfirm, \"PcvTkDZXj+81VGsdusGqXqQfW3U=\");\n\n_c = PasswordConfirm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordConfirm\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/IronHack/Bootcamp/w9Project/buono-gelato-client/src/components/clients/PasswordConfirm.js"],"names":["useState","PasswordConfirm","passwordError","setPasswordErr","confirmPasswordError","setConfirmPasswordError","passwordInput","setPasswordInput","password","confirmPassword","handlePasswordChange","event","passwordInputValue","target","value","trim","passwordInputFieldName","name","NewPasswordInput","handleValidation","uppercaseRegExp","lowercaseRegExp","digitsRegExp","specialCharRegExp","minLengthRegExp","passwordLength","length","uppercasePassword","test","lowercasePassword","digitsPassword","specialCharPassword","minLengthPassword","errMsg"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport function PasswordConfirm(){\r\nconst [passwordError, setPasswordErr] = useState(\"\");\r\nconst [confirmPasswordError, setConfirmPasswordError] = useState(\"\");\r\nconst [passwordInput, setPasswordInput] = useState({\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n});\r\nconst handlePasswordChange = (event) => {\r\n    const passwordInputValue = event.target.value.trim();\r\n    const passwordInputFieldName = event.target.name;\r\n    const NewPasswordInput = {\r\n        ...passwordInput,\r\n        [passwordInputFieldName]: passwordInputValue,\r\n    };\r\n    setPasswordInput(NewPasswordInput);\r\n};\r\nconst handleValidation = (event) => {\r\n    const passwordInputValue = event.target.value.trim();\r\n    const passwordInputFieldName = event.target.name;\r\n    //for password\r\n    if (passwordInputFieldName === \"password\") {\r\n        const uppercaseRegExp = /(?=.*?[A-Z])/;\r\n        const lowercaseRegExp = /(?=.*?[a-z])/;\r\n        const digitsRegExp = /(?=.*?[0-9])/;\r\n        const specialCharRegExp = /(?=.*?[#?!@$%^&*-])/;\r\n        const minLengthRegExp = /.{8,}/;\r\n        const passwordLength = passwordInputValue.length;\r\n        const uppercasePassword = uppercaseRegExp.test(passwordInputValue);\r\n        const lowercasePassword = lowercaseRegExp.test(passwordInputValue);\r\n        const digitsPassword = digitsRegExp.test(passwordInputValue);\r\n        const specialCharPassword = specialCharRegExp.test(passwordInputValue);\r\n        const minLengthPassword = minLengthRegExp.test(passwordInputValue);\r\n        let errMsg = \"\";\r\n        if (passwordLength === 0) {\r\n            errMsg = \"Password is empty\";\r\n        } else if (!uppercasePassword) {\r\n            errMsg = \"At least one Uppercase\";\r\n        } else if (!lowercasePassword) {\r\n            errMsg = \"At least one Lowercase\";\r\n        } else if (!digitsPassword) {\r\n            errMsg = \"At least one digit\";\r\n        } else if (!specialCharPassword) {\r\n            errMsg = \"At least one Special Characters\";\r\n        } else if (!minLengthPassword) {\r\n            errMsg = \"At least minumum 8 characters\";\r\n        } else {\r\n            errMsg = \"\";\r\n        }\r\n        setPasswordErr(errMsg);\r\n    }\r\n    // for confirm password\r\n    if (\r\n        passwordInputFieldName === \"confirmPassword\" ||\r\n        (passwordInputFieldName === \"password\" &&\r\n            passwordInput.confirmPassword.length > 0)\r\n    ) {\r\n        if (passwordInput.confirmPassword !== passwordInput.password) {\r\n            setConfirmPasswordError(\"Confirm password is not matched\");\r\n        } else {\r\n            setConfirmPasswordError(\"\");\r\n        }\r\n    }\r\n};\r\n}"]},"metadata":{},"sourceType":"module"}